from cmath import nan
from datetime import datetime
from unittest import result
import pandas as pd
import numpy as np
import os
import timeit
from datetime import datetime
from entities.distance_preference_imputator import impute_distance_preference

def data_preparation(dir, type):
    
    base_path = os.path.dirname(os.path.dirname(__file__))

    ##Creating the folder that will host the processed data
    if not os.path.isdir(base_path+"/processed_data/"):
        os.mkdir(base_path+"/processed_data/")

    print('*******************************************************')
    print('>>>            STARTING DATA PROCESSING.            <<<')
    print('*******************************************************')
    initial = timeit.default_timer()

    ##Loading raw data
    vacantes = pd.read_csv(dir+'vacancies.csv')
    postulations = pd.read_csv(dir+'postulations.csv')
    postulants = pd.read_csv(dir+'postulants.csv')
    demand = pd.read_csv(dir+'demand.csv')

    ##Checking a spelling error in the vacancies file
    if 'latitud' in vacantes.columns:
        vacantes = vacantes.rename(columns={'latitud':'latitude'})

    ##Initializing dataframes
    vacancies_df = pd.DataFrame()
    applicants_df = pd.DataFrame()
    applications_df = pd.DataFrame()
    links_df = pd.DataFrame(columns=["applicant_id", "linked_id"])
    siblings_df = pd.DataFrame(columns=["applicant_id", "sibling_id"])
    priority_profiles_df = pd.DataFrame(columns=["priority_profile", "priority_q1", "priority_profile_sibling_transition"])
    quota_order_df = pd.DataFrame(columns=["priority_profile", "secured_enrollment_indicator", "secured_enrollment_quota_id_criteria", "secured_enrollment_quota_id_value", "applicant_characteristic_1_criteria", "applicant_characteristic_1_value", "order_q1"])
    applicant_id_mapping_df = pd.DataFrame()
    program_id_mapping_df = pd.DataFrame()


    ##If distance priority enabled, we need to calculate distances for all students and schools. We do it on the input file demand.csv
    if type == "calculated_distance":
        demand = impute_distance_preference(demand, postulants, vacantes)
        priority_profiles_df["priority_profile"] = np.array([1, 2, 3])
        priority_profiles_df["priority_q1"] = np.array([1, 0, 2])
        priority_profiles_df["priority_profile_sibling_transition"] = np.array([2, 2, 3])
    elif type == "precalculated_distance":
        priority_profiles_df["priority_profile"] = np.array([1, 2, 3])
        priority_profiles_df["priority_q1"] = np.array([1, 0, 2])
        priority_profiles_df["priority_profile_sibling_transition"] = np.array([2, 2, 3])
    else:
        priority_profiles_df["priority_profile"] = np.array([1, 2])
        priority_profiles_df["priority_q1"] = np.array([1, 0])
        priority_profiles_df["priority_profile_sibling_transition"] = np.array([2, 2])

    ##Creating auxiliary column to identify programs
    demand["program_autogenerated_code"] = demand["localId"].astype(str) + "/" + demand["gradeId"].astype(str)
    vacantes["program_autogenerated_code"] = vacantes["localId"].astype(str) + "/" + vacantes["gradeId"].astype(str)
    

    ##Using Autoincremental id for applicants and programs. Creating a mapping file for each
    applicant_id_mapping_df["postulantId"] = postulations["postulantId"]
    applicant_id_mapping_df = applicant_id_mapping_df.merge(demand.drop_duplicates(subset=["postulantId"])[["postulantId", "gradeId"]], how="left", on="postulantId")
    applicant_id_mapping_df["applicant_id"] = range(1, len(postulations["postulantId"])+1)

    program_id_mapping_df["localId"] = vacantes["localId"]
    program_id_mapping_df["serviceId"] = vacantes["serviceId"]
    program_id_mapping_df["levelId"] = vacantes["levelId"]
    program_id_mapping_df["gradeId"] = vacantes["gradeId"]
    program_id_mapping_df["shiftId"] = vacantes["shiftId"]
    program_id_mapping_df["annex"] = vacantes["annex"]
    program_id_mapping_df["studentBodyId"] = vacantes["studentBodyId"]
    program_id_mapping_df["studentModalityId"] = vacantes["studentModalityId"]
    program_id_mapping_df["classroomTypeId"] = vacantes["classroomTypeId"]
    program_id_mapping_df["roundNumber"] = vacantes["roundNumber"]
    program_id_mapping_df["roundTypeId"] = vacantes["roundType"]
    program_id_mapping_df["program_autogenerated_code"] = vacantes["program_autogenerated_code"]
    program_id_mapping_df["program_id"] = range(1, len(vacantes["localId"])+1)
    
    ##Inserting new id's to the raw tables
    postulations = postulations.merge(applicant_id_mapping_df[["postulantId", "applicant_id"]], how="left", on="postulantId")
    postulants = postulants.merge(applicant_id_mapping_df[["postulantId", "applicant_id"]], how="left", on="postulantId")
    demand = demand.merge(applicant_id_mapping_df[["postulantId", "applicant_id"]], how="left", on="postulantId")
    demand = demand.merge(program_id_mapping_df[["program_autogenerated_code", "program_id"]], how="left", on="program_autogenerated_code")
    vacantes = vacantes.merge(program_id_mapping_df[["program_autogenerated_code", "program_id"]], how="left", on="program_autogenerated_code")
   
    ##Creating tables  
    vacancies_df["program_id"] = vacantes["program_id"]
    vacancies_df["quota_id"] = 1
    vacancies_df["institution_id"] = vacantes["localId"]
    vacancies_df["grade_id"] = vacantes["gradeId"]
    vacancies_df["regular_vacancies"] = vacantes["totalVacancyNna"]
    vacancies_df["special_1_vacancies"] = vacantes["totalVacancyNnaNee"]
    
    applicants_df["applicant_id"] = postulants["applicant_id"]
    applicants_df = applicants_df.merge(applicant_id_mapping_df[["applicant_id", "gradeId"]].rename(columns={'gradeId':'grade_id'}), how="left", on="applicant_id")
    applicants_df["special_assignment"] = [1 if priority==True else 0 for priority in postulants["priority"]]
    applicants_df["secured_enrollment_program_id"] = 0
    applicants_df["secured_enrollment_quota_id"] = 0
    applicants_df["applicant_characteristics_1"] = 0

    applications_df["applicant_id"] = demand["applicant_id"]
    applications_df["program_id"] = demand["program_id"]
    applications_df["quota_id"] = 1
    applications_df["institution_id"] = demand["localId"]
    applications_df["ranking_program"] = demand["order"]

    if type == "calculated_distance" or type == "precalculated_distance":
        applications_df["distance"] = demand["distancePriority"]

        ##Creating the priority_profile_program in the demand table
        demand.loc[demand["distancePriority"] == True, "priority_profile_program"] = 3
        demand.loc[(demand["distancePriority"] == False) & (demand["priority"] == False), "priority_profile_program"] = 1
        demand.loc[(demand["distancePriority"] == False) & (demand["priority"] == True), "priority_profile_program"] = 2
        demand.loc[demand["priority_profile_program"] == 3, "priority_number_quota"] = 2
        demand.loc[demand["priority_profile_program"] == 1, "priority_number_quota"] = 1
        demand.loc[demand["priority_profile_program"] == 2, "priority_number_quota"] = 0

        applications_df["priority_profile_program"] = demand["priority_profile_program"]
        applications_df["priority_number_quota"] = demand["priority_number_quota"]

    else:
        demand.loc[demand["priority"] == False, "priority_profile_program"] = 1
        demand.loc[demand["priority"] == True, "priority_profile_program"] = 2
        demand.loc[demand["priority_profile_program"] == 1, "priority_number_quota"] = 1
        demand.loc[demand["priority_profile_program"] == 2, "priority_number_quota"] = 0
        
        applications_df["priority_profile_program"] = demand["priority_profile_program"]
        applications_df["priority_number_quota"] = demand["priority_number_quota"]


    for index, row in postulations.iterrows():
        student_id = postulations["applicant_id"][index]

        linked_list = postulations[postulations["guardianId"]==postulations['guardianId'][index]].applicant_id.values

        for linked_element in linked_list:
            if linked_element != student_id:
                if postulations[postulations["applicant_id"]==linked_element].typeId.values[0] == "G":
                    instant_linked_df = pd.DataFrame([[student_id, linked_element]], columns=["applicant_id", "linked_id"])
                    links_df = pd.concat([links_df, instant_linked_df])

        siblings_list = postulations[postulations["guardianId"]==postulations['guardianId'][index]].applicant_id.values

        for siblings_element in siblings_list:
            if siblings_element != student_id:
                    instant_sibling_df = pd.DataFrame([[student_id, siblings_element]], columns=["applicant_id", "sibling_id"])
                    siblings_df = pd.concat([siblings_df, instant_sibling_df])
    
    ##Saving the processed data
    applicant_id_mapping_df.to_csv(dir+"applicant_id_mapping_with_grade.csv", index=False)
    program_id_mapping_df.to_csv(dir+"program_id_mapping.csv", index=False)
    vacancies_df.to_csv(base_path+"/processed_data/vacancies.csv", index=False)
    applicants_df.to_csv(base_path+"/processed_data/applicants.csv", index=False)
    applications_df.to_csv(base_path+"/processed_data/applications.csv", index=False)
    links_df.to_csv(base_path+"/processed_data/links.csv", index=False)
    siblings_df.to_csv(base_path+"/processed_data/siblings.csv", index=False)
    priority_profiles_df.to_csv(base_path+"/processed_data/priority_profiles.csv", index=False)
    quota_order_df.to_csv(base_path+"/processed_data/quota_order.csv", index=False)
    if type == "calculated_distance":
        demand = demand.drop(columns=['program_autogenerated_code', 'applicant_id',"program_id","priority_profile_program","priority_number_quota"])
        demand.to_csv(dir+"demand_with_distance_postulations.csv")

    elapsed = timeit.default_timer() - initial
    print('>>>             PROCESSING TIME:  '+format(round(elapsed, 3))+'            <<<')

    return base_path+"/processed_data/"



def output_preparation(results: pd.DataFrame, applications: pd.DataFrame, dir):

    base_path = os.path.dirname(os.path.dirname(__file__))

    ##Opening mapping files
    applicant_mapping = pd.read_csv(dir + "applicant_id_mapping_with_grade.csv")
    program_mapping = pd.read_csv(dir + "program_id_mapping.csv")

    results = results.sort_values(by=["program_id"])
    results.loc[results["program_id"] >=0, "assigned"] = True
    results.loc[results["program_id"] < 0, "assigned"] = False
    # results["assgined"] = [True if program >= 0 else False for program in results["program_id"]]
    results["sendDateTime"] = datetime.now().strftime("%m/%d/%Y %H:%M:%S")
    results["assignmentTypeId"] = 1

    asignaciones = results.merge(applicant_mapping, how="left", on="applicant_id")
    asignaciones = asignaciones.merge(program_mapping, how="left", on="program_id")

    asignaciones = asignaciones[["postulantId", "localId", "serviceId", "annex", "studentBodyId", "levelId", "grade_id", "shiftId", "studentModalityId", "classroomTypeId", "assigned", "assignmentTypeId", "roundNumber","roundTypeId", "sendDateTime"]]

    applications = applications.merge(applicant_mapping, how="left", on="applicant_id")
    applications = applications[["postulantId", "ranking_program", "lottery_number_quota"]]
    applications = applications.rename(columns={'ranking_program':'order'})

    return asignaciones, applications